/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package cl.gestiontareasprevired.controller;

import cl.gestiontareasprevired.dto.ErrorResponse;
import cl.gestiontareasprevired.dto.LoginCredentials;
import cl.gestiontareasprevired.dto.LoginSuccessResponse;
import cl.gestiontareasprevired.service.UsuariosService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.annotation.Generated;

@RestController
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-11T16:53:34.935907-03:00[America/Santiago]")
@Validated
@Tag(name = "Auth", description = "the Auth API")
public class LoginController {

    @Autowired
    UsuariosService usuariosService;
    /**
     * POST /login : Inicio de sesión para usuarios
     *
     * @param loginCredentials Credenciales de acceso del usuario (required)
     * @return Autenticación exitosa (status code 200)
     *         or Credenciales inválidas (status code 401)
     */
    @Operation(
        operationId = "loginUser",
        summary = "Inicio de sesión para usuarios",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Autenticación exitosa", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginSuccessResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Credenciales inválidas",content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
                @ApiResponse(responseCode = "400", description = "Error en los parametros ingresados", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
                })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    public ResponseEntity<?> loginUser(
            @Valid @RequestBody LoginCredentials loginCredentials,
            HttpServletRequest request) {
        return usuariosService.validarUsuario(loginCredentials)
                .map(response -> new ResponseEntity<Object>(response, HttpStatus.OK))
                .orElse(ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(new ErrorResponse(false,"Credenciales inválidas.")));
    }



}
