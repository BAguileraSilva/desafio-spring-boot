/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package cl.gestiontareasprevired.controller;

import cl.gestiontareasprevired.dto.DefaultResponse;
import cl.gestiontareasprevired.dto.ErrorResponse;
import cl.gestiontareasprevired.dto.TareaReqDto;
import cl.gestiontareasprevired.dto.TareaDto;
import cl.gestiontareasprevired.service.TareasService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.net.URI;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@RestController
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-11T16:53:34.935907-03:00[America/Santiago]")
@Validated
@Tag(name = "tareas", description = "Tareas API")
public class TareasController {


    @Autowired
    TareasService tareasService;
    /**
     * GET /tareas : Obtiene una lista de todas las tareas.
     *
     * @return Lista de tareas (status code 200)
     */
    @Operation(
        operationId = "tareasGet",
        summary = "Obtiene una lista de todas las tareas.",
        security = { @SecurityRequirement(name = "Bearer") },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de tareas", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TareaDto.class)))
            }),
            @ApiResponse(responseCode = "204", description = "No existen datos.")
        }
    )
    @SecurityRequirement(name = "Authorization")
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tareas",
        produces = { "application/json" }
    )
    public ResponseEntity<List<TareaDto>> tareasGet(HttpServletRequest request) {
        List<TareaDto> tareas = tareasService.getAllTareas();
        if (tareas.isEmpty()) {
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.ok(tareas);
        }
    }


    /**
     * DELETE /tareas/{idTarea} : Elimina una tarea
     *
     * @param idTarea  (required)
     * @return Tarea eliminada (status code 204)
     */
    @Operation(
        operationId = "tareasIdTareaDelete",
        summary = "Elimina una tarea",
        responses = {
            @ApiResponse(responseCode = "204", description = "Tarea eliminada"),
                @ApiResponse(responseCode = "404", description = "Tarea no encontrada.")
        }
    )
    @SecurityRequirement(name = "Authorization")
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/tareas/{idTarea}"
    )
    public ResponseEntity<Void> tareasIdTareaDelete(
        @Parameter(name = "idTarea", description = "", required = true, in = ParameterIn.PATH) @PathVariable("idTarea") String idTarea
    ) {
        try {
            tareasService.eliminarTareaPorId(idTarea);
            return ResponseEntity.ok().build();
        } catch (Exception e) {
            return ResponseEntity.notFound().build(); // Respuesta 404 NOT FOUND si la tarea no existe o no se pudo eliminar
        }

    }


    /**
     * GET /tareas/{idTarea} : Obtiene una tarea específica por su ID
     *
     * @param idTarea (required)
     * @return Detalles de la tarea (status code 200)
     */
    @Operation(
        operationId = "tareasIdTareaGet",
        summary = "Obtiene una tarea específica por su ID",
        responses = {
                @ApiResponse(
                        responseCode = "204",
                        description = "No existen datos."
                ),
                @ApiResponse(
                        responseCode = "200",
                        description = "Detalles de la tarea",
                        content = @Content(
                                mediaType = "application/json",
                                schema = @Schema(implementation = TareaDto.class)
                        )
                ),
                @ApiResponse(
                        responseCode = "400",
                        description = "Error en la solicitud",
                        content = @Content(
                                mediaType = "application/json",
                                schema = @Schema(implementation = ErrorResponse.class)
                        )
                )
        }
    )
    @SecurityRequirement(name = "Authorization")
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tareas/{idTarea}",
        produces = { "application/json" }
    )
    public ResponseEntity<Optional<TareaDto>> tareasIdTareaGet(
            @PathVariable("idTarea") String idTarea,
            HttpServletRequest request) {
        Optional<TareaDto> tarea = tareasService.getTareaPorId(idTarea);
        if (tarea.isEmpty()) {
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.ok(tarea);
        }
    }



    /**
     * PUT /tareas/{idTarea} : Actualiza una tarea existente
     *
     * @param idTarea  (required)
     * @param tarea  (required)
     * @return Tarea actualizada (status code 200)
     */
    @Operation(
        operationId = "tareasIdTareaPut",
        summary = "Actualiza una tarea existente",
        responses = {
            @ApiResponse(responseCode = "200", description = "Tarea actualizada"),
                @ApiResponse(responseCode = "404", description = "Tarea no encontrada.")
        }
    )
    @SecurityRequirement(name = "Authorization")
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/tareas/{idTarea}",
        consumes = { "application/json" }
    )
    public ResponseEntity<Void> tareasIdTareaPut(
        @Parameter(name = "idTarea", description = "", required = true, in = ParameterIn.PATH) @PathVariable("idTarea") String idTarea,
        @Parameter(name = "TareaReqDto", description = "", required = true) @Valid @RequestBody TareaReqDto tarea
    ) {
        try {
            tareasService.actualizarTarea(idTarea, tarea);
            return ResponseEntity.ok().build();
        } catch (RuntimeException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        }

    }


    /**
     * POST /tareas : Crea una nueva tarea
     *
     * @param tarea  (required)
     * @return Tarea creada (status code 201)
     */
    @SecurityRequirement(name = "Authorization")
    @Operation(
        operationId = "tareasPost",
        summary = "Crea una nueva tarea",
        responses = {
            @ApiResponse(responseCode = "201", description = "Tarea creada", content = {}),
                @ApiResponse(responseCode = "404", description = "Usuario/EstadoTarea no encontrado", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
                }),
                @ApiResponse(responseCode = "409", description = "Nombre tarea duplicado para el mismo usuario", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
                }),
                @ApiResponse(responseCode = "400", description = "Error en los parametros ingresados", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
                })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tareas",
        consumes = { "application/json" }
    )
    public ResponseEntity<Void> tareasPost(
            @Parameter(name = "TareaReqDto", description = "", required = true) @Valid @RequestBody TareaReqDto tarea
    ) {
            String id = tareasService.crearTarea(tarea);
            URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
                    .buildAndExpand(id).toUri();
            return ResponseEntity.created(location).build();
    }


}
